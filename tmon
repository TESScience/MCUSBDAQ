#! /usr/bin/env python
# -*- mode: python; encoding: utf-8 -*-
#
#  A test script to drive the mcc support module
#
#  This script was developed by:
#    Rattlesnake Hill Technologies Inc. <chuck@rattlesnake-hill.com>
#  for:
#    The TESS project at the MIT Kalvi Institute for Astrophysics and
#    Space Research 
#
#  The MIT Kalvi Institute for Astrophysics and Space Research has ownership
#  of this code, and will establish the licensing terms.
#


def keyboard_hit(timeout):
    import tty
    import termios
    import sys
    import select
    rc = False
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        [i, o, e] = select.select([fd], [], [], timeout)
        if i:
            rc = True
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return rc


def main():
    import mcc
    from mccusbtemp import CH0, CH7, DIO_DIR_IN
    import datetime
    import time
    try:
        usbtemp = mcc.usb_temp()
        usbtemp.dConfigPort(DIO_DIR_IN)
        print("Press any key to exit program:\n")
        start = CH0  # CJC0 # CH0
        end = CH7  # CJC1 # CH7
        nchans = 1 + (end - start)

        # Print the header
        print("Sample#, Sample Time, {Channels}".format(
            Channels=", ".join("Ch{}".format(i) for i in range(0, nchans))))

        sample_number = 0
        timeout = 0
        while not keyboard_hit(timeout):
            sample_time = time.mktime(datetime.datetime.now().timetuple())
            temperatures = usbtemp.tinScan(start, end)
            sample_number += 1
            # Print the sample data
            print("{sample_number}, {sample_time}, {temps}".format(
                sample_number=sample_number,
                sample_time=sample_time,
                temps=", ".join(map(str, temperatures))))

            loop_time = time.mktime(datetime.datetime.now().timetuple())
            timeout = 2.0 - (loop_time - sample_time)

    except (KeyboardInterrupt):
        pass


if __name__ == '__main__':
    main()
