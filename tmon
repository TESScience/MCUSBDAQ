#! /usr/bin/env python
# -*- mode: python; encoding: utf-8 -*-
#
#  A test script to drive the mcc support module
#
#  This module was developed by:
#    Rattlesnake Hill Technologies Inc. <chuck@rattlesnake-hill.com>
#  for:
#    The TESS project at the MIT Kalvi Institute for Astrophysics and
#    Space Research 
#
#  The MIT Kalvi Institute for Astrophysics and Space Research has ownership
#  of this code, and will establish the licensing terms.
#
import tty
import termios
import sys
import select
import datetime
import time
import hid

import mcc
from mccusbtemp import *

def kbhit(timeout):
    rc = False
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        [i, o, e] = select.select([fd], [], [], timeout)
        if i:
            rc = True
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return rc


def main():
    try:
        usbtemp = mcc.usb_temp()
        usbtemp.dConfigPort(DIO_DIR_IN)
        print("Press any key to exit program:\n")
        start = CH0  # CJC0 # CH0
        end =   CH7  # CJC1 # CH7
        nchans = 1 + (end - start)

        os = "Sample#, Sample Time"
        for index in range(0, nchans):
            os += ", Ch" + str(index)
        print(os)

        sample_number = 0
        timeout = 0
        while not kbhit(timeout):
            sample_time = time.mktime(datetime.datetime.now().timetuple())
            templist = usbtemp.tinScan(start, end)
            sample_number = sample_number + 1
            os = ""
            for index in range(0, nchans):
                if index != 0:
                    os += ", "
                os += str(templist[index])
            print(str(sample_number) + ", " + str(sample_time) + ", " + os)
            loop_time = time.mktime(datetime.datetime.now().timetuple())
            timeout = 2.0 - (loop_time - sample_time)

    except (KeyboardInterrupt):
        pass

if __name__=='__main__':
    main()
